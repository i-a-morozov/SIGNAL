#ifndef _SIGNAL__H__
#define _SIGNAL__H__
void    generate_signal_(int* flag, int* length, double* sequence, int* loop, double* frequency, double* cos_amp, double* sin_amp) ;
void    ffrft_(int* length, double* argument, double* sequence) ;
void    fft_external_(int* length, int* direction, double* sequence) ;
void    fft_radix_two_(int* length, int* direction, double* sequence) ;
void    fft_radix_eight_(int* length, int* direction, double* sequence) ;
void    compute_table_(int* length, int* pad) ;
void    destroy_table_() ;
void    convert_real_(int* length, double* r_part, double* sequence) ;
void    convert_complex_(int* length, double* r_part, double* i_part, double* sequence) ;
int     round_up_(int* number) ;
void    pad_(int* linput, int* loutput, double* input, double* output) ;
void    remove_mean_(int* length, double* input, double* output) ;
void    remove_window_mean_(int* length, double* total, double* window, double* input, double* output) ;
void    apply_window_(int* length, double* window, double* input, double* output) ;
void    filter_(int* length, double* sequence, int* limit, double* svd_list) ;
int     peak_(int* length, double* sequence, int* id) ;
void    window_cos_(int* length, int* order, double* window) ;
void    window_cos_generic_(int* length, double* order, double* window) ;
void    window_kaiser_(int* length, double* order, double* window) ;
double  frequency_initial_(double* range_min, double* range_max, int* peak, int* length, int* pad, double* sequence) ;
double  frequency_initial__(double* range_min, double* range_max, int* peak, int* length, int* pad, double* sequence) ;
double  frequency_refine_(int* method, int* length, double* sequence, double* initial) ;
double  frequency_refine__(int* method, int* length, double* sequence, double* initial) ;
double  binary_amplitude_(int* flag, int* length, double* total, double* window, double* sequence, double* initial) ;
double  golden_amplitude_(int* flag, int* length, double* total, double* window, double* sequence, double* initial) ;
double  frequency_(int* flag, double* range_min, double* range_max, int* peak, int* method, int* length, int* pad, double* total, double* window, double* sequence) ;
double  frequency__(int* flag, double* range_min, double* range_max, int* peak, int* method, int* length, int* pad, double* total, double* window, double* sequence) ;
void    amplitude_(int* flag, int* length, double* total, double* window, double* sequence, double* frequency, double* cos_amp, double* sin_amp, double* amp) ;
void    decomposition_(int* flag, double* range_min, double* range_max, int* method, int* mode, int* length, int* pad, double* total, double* window, double* sequence, int* loop, double* frequency, double* cos_amp, double* sin_amp) ;
void    decomposition__(int* flag, double* range_min, double* range_max, int* method, int* mode, int* length, int* pad, double* total, double* window, double* sequence, int* loop, double* frequency, double* cos_amp, double* sin_amp) ;
void    frequency_list_(int* flag, double* range_min, double* range_max, int* method, int* mode, int* length, int* pad, double* total, double* window, double* sequence, int* loop, double* frequency) ;
void    frequency_list__(int* flag, double* range_min, double* range_max, int* method, int* mode, int* length, int* pad, double* total, double* window, double* sequence, int* loop, double* frequency) ;
void    amplitude_list_(int* flag, int* length, double* total, double* window, double* sequence, int* loop, double* frequency, double* cos_amp, double* sin_amp) ;
void    frequency_correction_(int* flag, double* range_min, double* range_max, int* method, int* mode, int* length, int* pad, double* total, double* window, int* loop, double* frequency, double* cos_amp, double* sin_amp) ;
void    frequency_correction__(int* flag, double* range_min, double* range_max, int* method, int* mode, int* length, int* pad, double* total, double* window, int* loop, double* frequency, double* cos_amp, double* sin_amp) ;
void    fit_(int* length, double* sequence, int* loop, double* frequency, double* mean, double* cos_amp, double* sin_amp, double* error) ;
void    fit_parabola_(int* length, double* x, double* y, double* a, double* b, double* c, double* maximum) ;
#endif